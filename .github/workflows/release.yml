name: Release

on:
    push:
        tags:
            - "v*.*.*"
    workflow_dispatch:
        inputs:
            version:
                description: "Release version (e.g., v1.0.0)"
                required: true
                type: string

permissions:
    contents: write

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: false

env:
    LADYBIRD_SOURCE_DIR: ${{ github.workspace }}
    CCACHE_DIR: ${{ github.workspace }}/.ccache
    VCPKG_ROOT: ${{ github.workspace }}/Build/vcpkg

jobs:
    create-release:
        name: Create Release
        runs-on: ubuntu-latest
        outputs:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            version: ${{ steps.get_version.outputs.version }}
        steps:
            - name: Get version
              id: get_version
              run: |
                  if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
                    echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
                  else
                    echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
                  fi

            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ steps.get_version.outputs.version }}
                  release_name: Ladybird ${{ steps.get_version.outputs.version }}
                  draft: true
                  prerelease: true
                  body: |
                      ## Ladybird Browser ${{ steps.get_version.outputs.version }}

                      > [!IMPORTANT]
                      > Ladybird is in a pre-alpha state, and only suitable for use by developers

                      ### Downloads

                      - **Linux (x86_64)**: `ladybird-linux-x86_64-${{ steps.get_version.outputs.version }}.tar.gz`
                      - **macOS (arm64)**: `ladybird-macos-arm64-${{ steps.get_version.outputs.version }}.tar.gz`
                      - **Windows (x86_64)**: `ladybird-windows-x86_64-${{ steps.get_version.outputs.version }}.zip`

                      ### Installation

                      Please refer to the [documentation](https://github.com/${{ github.repository }}/blob/master/Documentation/BuildInstructionsLadybird.md) for system requirements and setup instructions.

                      ### Changes

                      TODO: Add release notes

    build-linux-x86_64:
        name: Build Linux x86_64
        needs: create-release
        runs-on: ubuntu-24.04
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set Up Environment
              uses: ./.github/actions/setup
              with:
                  os: Linux
                  arch: x86_64
                  toolchain: Clang

            - name: Setup ccache
              uses: actions/cache@v4
              with:
                  path: ${{ env.CCACHE_DIR }}
                  key: ccache-linux-x86_64-release-${{ github.sha }}
                  restore-keys: |
                      ccache-linux-x86_64-release-

            - name: Restore Caches
              uses: ./.github/actions/cache-restore
              id: cache-restore
              with:
                  runner_labels: '["ubuntu-24.04"]'
                  os: Linux
                  arch: x86_64
                  toolchain: Clang
                  cache_key_extra: Distribution
                  ccache_path: ${{ env.CCACHE_DIR }}
                  download_cache_path: ${{ github.workspace }}/Build/caches
                  vcpkg_cache_path: ${{ github.workspace }}/Build/caches/vcpkg-binary-cache

            - name: Build Ladybird
              run: |
                  cmake --preset Distribution -B Build
                  cmake --build Build
                  cmake --install Build --strip --prefix Install

            - name: Debug - List built files
              run: |
                  echo "=== Install directory structure ==="
                  ls -la Install/ || echo "Install directory not found"
                  echo "=== Install/bin contents ==="
                  ls -la Install/bin/ || echo "bin directory empty or not found"
                  echo "=== Install/libexec contents ==="
                  ls -la Install/libexec/ || echo "libexec directory empty or not found"
                  echo "=== All executables ==="
                  find Install -type f -executable || echo "No executables found"

            - name: Create tarball
              run: |
                  echo "Contents of Install directory:"
                  ls -laR Install/
                  echo "Creating tarball from Install directory..."
                  tar -czf ladybird-linux-x86_64-${{ needs.create-release.outputs.version }}.tar.gz -C Install .

            - name: Upload Release Asset
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ needs.create-release.outputs.upload_url }}
                  asset_path: ./ladybird-linux-x86_64-${{ needs.create-release.outputs.version }}.tar.gz
                  asset_name: ladybird-linux-x86_64-${{ needs.create-release.outputs.version }}.tar.gz
                  asset_content_type: application/gzip

    build-macos-arm64:
        name: Build macOS arm64
        needs: create-release
        runs-on: macos-15
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set Up Environment
              uses: ./.github/actions/setup
              with:
                  os: macOS
                  arch: arm64
                  toolchain: Clang

            - name: Setup ccache
              uses: actions/cache@v4
              with:
                  path: ${{ env.CCACHE_DIR }}
                  key: ccache-macos-arm64-release-${{ github.sha }}
                  restore-keys: |
                      ccache-macos-arm64-release-

            - name: Restore Caches
              uses: ./.github/actions/cache-restore
              id: cache-restore
              with:
                  runner_labels: '["macos-15"]'
                  os: macOS
                  arch: arm64
                  toolchain: Clang
                  cache_key_extra: Distribution
                  ccache_path: ${{ env.CCACHE_DIR }}
                  download_cache_path: ${{ github.workspace }}/Build/caches
                  vcpkg_cache_path: ${{ github.workspace }}/Build/caches/vcpkg-binary-cache

            - name: Build Ladybird
              run: |
                  cmake --preset Distribution -B Build
                  cmake --build Build
                  cmake --install Build --strip --prefix Install

            - name: Debug - List built files
              run: |
                  echo "=== Install directory structure ==="
                  ls -la Install/ || echo "Install directory not found"
                  echo "=== Install/bin contents ==="
                  ls -la Install/bin/ || echo "bin directory empty or not found"
                  echo "=== Install/libexec contents ==="
                  ls -la Install/libexec/ || echo "libexec directory empty or not found"
                  echo "=== All executables ==="
                  find Install -type f -perm +111 || echo "No executables found"

            - name: Create tarball
              run: |
                  echo "Contents of Install directory:"
                  ls -laR Install/
                  echo "Creating tarball from Install directory..."
                  tar -czf ladybird-macos-arm64-${{ needs.create-release.outputs.version }}.tar.gz -C Install .

            - name: Upload Release Asset
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ needs.create-release.outputs.upload_url }}
                  asset_path: ./ladybird-macos-arm64-${{ needs.create-release.outputs.version }}.tar.gz
                  asset_name: ladybird-macos-arm64-${{ needs.create-release.outputs.version }}.tar.gz
                  asset_content_type: application/gzip

    build-windows-x86_64:
        name: Build Windows x86_64
        needs: create-release
        runs-on: windows-2025
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set Up Environment
              uses: ./.github/actions/setup
              with:
                  os: Windows
                  arch: x86_64
                  toolchain: ClangCL

            - name: Setup ccache
              uses: actions/cache@v4
              with:
                  path: ${{ env.CCACHE_DIR }}
                  key: ccache-windows-x86_64-release-${{ github.sha }}
                  restore-keys: |
                      ccache-windows-x86_64-release-

            - name: Restore Caches
              uses: ./.github/actions/cache-restore
              id: cache-restore
              with:
                  runner_labels: '["windows-2025"]'
                  os: Windows
                  arch: x86_64
                  toolchain: ClangCL
                  cache_key_extra: Windows_CI
                  ccache_path: ${{ env.CCACHE_DIR }}
                  download_cache_path: ${{ github.workspace }}/Build/caches
                  vcpkg_cache_path: ${{ github.workspace }}/Build/caches/vcpkg-binary-cache

            - name: Build Ladybird
              run: |
                  cmake --preset Windows_CI -B Build
                  cmake --build Build --config Release
                  cmake --install Build --config Release --prefix Install

            - name: Debug - List built files
              run: |
                  echo "=== Install directory structure ==="
                  if (Test-Path Install) { Get-ChildItem -Path Install } else { echo "Install directory not found" }
                  echo "=== Install/bin contents ==="
                  if (Test-Path Install/bin) { Get-ChildItem -Path Install/bin } else { echo "bin directory empty or not found" }
                  echo "=== Install/libexec contents ==="
                  if (Test-Path Install/libexec) { Get-ChildItem -Path Install/libexec } else { echo "libexec directory empty or not found" }
                  echo "=== All executables ==="
                  if (Test-Path Install) { Get-ChildItem -Path Install -Recurse -Include "*.exe" } else { echo "No executables found" }

            - name: Create zip
              run: |
                  echo "Contents of Install directory:"
                  Get-ChildItem -Path Install -Recurse
                  echo "Creating zip from Install directory..."
                  7z a -tzip ladybird-windows-x86_64-${{ needs.create-release.outputs.version }}.zip ./Install/*

            - name: Upload Release Asset
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ needs.create-release.outputs.upload_url }}
                  asset_path: ./ladybird-windows-x86_64-${{ needs.create-release.outputs.version }}.zip
                  asset_name: ladybird-windows-x86_64-${{ needs.create-release.outputs.version }}.zip
                  asset_content_type: application/zip
